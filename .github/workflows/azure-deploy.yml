name: Deploy to Azure Web App

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Consolidate frontend and backend
        run: |
          # Check if it's a separated frontend/backend structure
          if [ -d "frontend" ] && [ -d "backend" ]; then
            echo "üîÑ Consolidating frontend/backend project..."
            
            # Create consolidated structure
            mkdir -p consolidated/src
            mkdir -p consolidated/public
            mkdir -p consolidated/database
            
            # Copy frontend files to consolidated
            echo "üìÅ Copying frontend files..."
            [ -d "frontend/src" ] && cp -r frontend/src/* consolidated/src/ 2>/dev/null || true
            [ -d "frontend/public" ] && cp -r frontend/public/* consolidated/public/ 2>/dev/null || true
            [ -f "frontend/package.json" ] && cp frontend/package.json consolidated/package-frontend.json
            [ -f "frontend/tsconfig.json" ] && cp frontend/tsconfig.json consolidated/
            [ -f "frontend/tailwind.config.ts" ] && cp frontend/tailwind.config.ts consolidated/
            [ -f "frontend/next.config.mjs" ] && cp frontend/next.config.mjs consolidated/
            [ -f "frontend/postcss.config.js" ] && cp frontend/postcss.config.js consolidated/
            
            # Copy backend files to consolidated (merging with frontend in src)
            echo "üìÅ Merging backend files..."
            [ -d "backend/src" ] && cp -r backend/src/* consolidated/src/ 2>/dev/null || true
            [ -f "backend/package.json" ] && cp backend/package.json consolidated/package-backend.json
            [ -f "backend/tsconfig.json" ] && cp backend/tsconfig.json consolidated/tsconfig-backend.json
            
            # Copy database files if exist
            [ -d "database" ] && cp -r database/* consolidated/database/ 2>/dev/null || true
            
            # Merge package.json files
            echo "üì¶ Merging package.json dependencies..."
            cd consolidated
            node -e "
              const fs = require('fs');
              
              // Read both package.json files
              const frontendPkg = fs.existsSync('package-frontend.json') ? 
                JSON.parse(fs.readFileSync('package-frontend.json', 'utf8')) : 
                { dependencies: {}, devDependencies: {} };
              
              const backendPkg = fs.existsSync('package-backend.json') ? 
                JSON.parse(fs.readFileSync('package-backend.json', 'utf8')) : 
                { dependencies: {}, devDependencies: {} };
              
              // Create merged package.json
              const mergedPkg = {
                name: 'project579-consolidated',
                version: '1.0.0',
                description: 'Consolidated project',
                main: 'dist/server.js',
                scripts: {
                  'dev': frontendPkg.scripts?.dev || 'next dev',
                  'build': 'npm run build:frontend && npm run build:backend',
                  'build:frontend': frontendPkg.scripts?.build || 'next build',
                  'build:backend': 'tsc',
                  'start': 'node dist/server.js',
                  'test': 'jest --passWithNoTests'
                },
                dependencies: {
                  ...frontendPkg.dependencies,
                  ...backendPkg.dependencies
                },
                devDependencies: {
                  ...frontendPkg.devDependencies,
                  ...backendPkg.devDependencies
                }
              };
              
              // Write merged package.json
              fs.writeFileSync('package.json', JSON.stringify(mergedPkg, null, 2));
              
              // Clean up temporary files
              fs.existsSync('package-frontend.json') && fs.unlinkSync('package-frontend.json');
              fs.existsSync('package-backend.json') && fs.unlinkSync('package-backend.json');
              fs.existsSync('tsconfig-backend.json') && fs.unlinkSync('tsconfig-backend.json');
              
              console.log('‚úÖ Package.json merged successfully');
            "
            
            # Update tsconfig.json for consolidated structure
            node -e "
              const fs = require('fs');
              if (fs.existsSync('tsconfig.json')) {
                const tsconfig = JSON.parse(fs.readFileSync('tsconfig.json', 'utf8'));
                tsconfig.compilerOptions = tsconfig.compilerOptions || {};
                tsconfig.compilerOptions.outDir = './dist';
                tsconfig.compilerOptions.rootDir = './src';
                tsconfig.include = ['src/**/*'];
                tsconfig.exclude = ['node_modules', 'dist', '.next'];
                fs.writeFileSync('tsconfig.json', JSON.stringify(tsconfig, null, 2));
                console.log('‚úÖ tsconfig.json updated');
              }
            "
            
            # Move consolidated files to root
            mv consolidated/* .
            mv consolidated/.[^.]* . 2>/dev/null || true
            
            # Clean up
            rm -rf frontend backend consolidated
            
            echo "‚úÖ Consolidation complete!"
            echo "üìÅ Final structure:"
            ls -la
          fi

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: |
          echo "üî® Building application..."
          if [ -f "next.config.mjs" ]; then
            echo "Building Next.js frontend..."
            npm run build:frontend || npx next build
          fi
          
          if [ -f "tsconfig.json" ]; then
            echo "Building TypeScript backend..."
            npm run build:backend || npx tsc
          fi
          
          echo "‚úÖ Build complete"
          ls -la
          [ -d "dist" ] && echo "dist/ contents:" && ls -la dist/
          [ -d ".next" ] && echo ".next/ folder found"

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'expandev-01'
          package: .